pipeline {
    agent any

    tools {
        jdk 'jdk21'
        maven 'maven3'
        dockerTool 'docker'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/AyoubBelhaj/employee-manager-backend.git'
            }
        }

        stage ('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage ('Test') {
            steps {
                sh 'mvn test -Dspring.profiles.active=test'
            }
        }

        stage ('File System Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-report.html .'
            }
        }

        stage('Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage ('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar'){
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=Employee-Manager-Backend-Test \
                            -Dsonar.projectKey=Employee-Manager-Backend-Test\
                            -Dsonar.sources=src/main/java \
                            -Dsonar.java.binaries=target/classes'''
                }
            }
        }

        stage ('Quality Gate') {
            steps {
                script{
                   waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage ('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker build -t riva10/employee-manager:latest ."
                    }
               }
            }
        }

        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html riva10/employee-manager:latest "
            }
        }

        stage('Push Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker push riva10/employee-manager:latest"
                    }
               }
            }
        }
    }
}